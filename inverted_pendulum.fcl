FUNCTION_BLOCK Inverted_Pendulum

    VAR_INPUT
        theta : REAL;
        theta_dot : REAL;
        x_dot : REAL;
        (* other vars if needed *)
    END_VAR

    VAR_OUTPUT
        F : REAL;
        (* other vars if needed *)
    END_VAR

    FUZZIFY theta
        (* terms *)
        TERM left := (220,0) (290,1) (320,0);
        TERM right := (40,0) (70,1) (140,0);
        TERM up_left := (180,0) (195,1) (235,0);
        TERM up_right := (135,0) (165,1) (180,0);
        TERM center := (170,0) (180,1) (190,0);
        TERM down_right :=  (0,1) (45,0);
        TERM down_left := (315,0) (360,1);
    END_FUZZIFY

    FUZZIFY theta_dot
        (* terms *)
        TERM ccw_fast := (3,0) (7,1);
        TERM cw_fast := (-7,1) (-3,0);
        TERM ccw_central := (1,0) (3,1) (6.5,0);
        TERM cw_central := (-6.5,0) (-3,1) (-1,0);
        TERM ccw := (0,0) (0.65,1) (3,0);
        TERM cw := (-3,0) (-0.65,1) (0,0);
        TERM stop := (-0.15,0) (0,1) (0.15,0);

    END_FUZZIFY

    FUZZIFY x_dot
        TERM left_fast :=  (-50,0) (-70,1);
        TERM right_fast := (50,0) (70,1);
        TERM left_slow :=  (-50,0) (-30,1) (0,0);
        TERM right_slow := (50,0) (30,1) (0,0) ;
        TERM stop :=       (-30,0) (0,1) (30,0);

    END_FUZZIFY

    DEFUZZIFY F
        TERM left_veryfast := (-70,1) (-50,0);
        TERM right_veryfast := (70,1) (50,0);
        TERM left_fast := (-70,0) (-60,1) (-40,0);
        TERM right_fast := (70,0) (60,1) (40,0);
        TERM left := (-50,0) (-20,1) (0,0);
        TERM right := (50,0) (20,1) (0,0);
        TERM left_medium := (-60,0) (-50,1) (-20,0);
        TERM right_medium := (60,0) (50,1) (20,0);
        TERM stop := (-0.5,0) (0,1) (0.5,0);


        ACCU : MAX;
        METHOD : COG;
        DEFAULT := 0;
    END_DEFUZZIFY

    RULEBLOCK Inverted_Pendulum
        (* rules *)
        AND : MIN;
        OR : MAX;

        RULE 1 :
        IF theta IS center AND theta_dot IS stop THEN F IS stop;

        RULE 2 : 
        IF theta IS center AND theta_dot IS ccw THEN F IS left_medium;

        RULE 3 :
        IF theta IS center AND theta_dot IS cw_central THEN F IS right_fast;

        RULE 4 :
        IF theta IS center AND theta_dot IS cw THEN F IS right_medium;

        RULE 5 :
        IF theta IS up_left AND theta_dot IS cw THEN F IS left_medium;

        RULE 6 :
        IF theta IS up_left AND theta_dot IS cw_fast THEN F IS right_veryfast;

        RULE 7 :
        IF theta IS center AND theta_dot IS ccw_fast THEN F IS left_veryfast;

        RULE 8 :
        IF theta IS center AND theta_dot IS cw_fast THEN F IS right_veryfast;

        RULE 9 :
        IF theta IS center AND theta_dot IS ccw_central THEN F IS left_fast;

        RULE 10 :
        IF theta IS up_left AND theta_dot IS cw_central THEN F IS stop;

        RULE 11 :
        IF theta IS up_right AND theta_dot IS ccw THEN F IS right_medium;

        RULE 12 :
        IF theta IS up_right AND theta_dot IS ccw_central THEN F IS stop;

        RULE 13 :
        IF theta IS up_right AND theta_dot IS ccw_fast THEN F IS left_veryfast;
            
        RULE 14 :
        IF theta IS down_left AND (theta_dot IS stop OR theta_dot IS cw OR theta_dot IS cw_central) THEN F IS right;

        RULE 15 :
        IF theta IS down_right AND (theta_dot IS stop OR theta_dot IS ccw OR theta_dot IS ccw_central) THEN F IS left;



    END_RULEBLOCK

END_FUNCTION_BLOCK